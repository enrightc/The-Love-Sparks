# Generated by Django 5.1.6 on 2025-02-16 10:24

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('gender', models.CharField(choices=[('man', 'Man'), ('woman', 'Woman'), ('non_binary', 'Non-Binary'), ('prefer_not_to_say', 'Prefer not to say')], max_length=50)),
                ('looking_for', models.CharField(choices=[('man', 'Man'), ('woman', 'Woman'), ('non_binary', 'Non-Binary'), ('any', 'Any')], max_length=50)),
                ('age', models.PositiveIntegerField()),
                ('location', models.CharField(blank=True, max_length=255)),
                ('hobbies', models.TextField(blank=True)),
                ('free_time_preference', models.CharField(choices=[('creative', 'Creative hobbies (painting, music, etc.)'), ('active', 'Staying active (Sports, hiking, working out)'), ('learning', 'Learning and discovery (reading, puzzles, documentaries)'), ('social', 'Socialising and entertainment (movies, concerts, parties)')], max_length=50)),
                ('friends_description', models.CharField(choices=[('outgoing', 'Outgoing and energetic'), ('thoughtful', 'Thoughtful and analytical'), ('caring', 'Caring and empathic'), ('ambitious', 'Ambitious and determined')], max_length=50)),
                ('relationship_excites', models.CharField(choices=[('experiences', 'Exploring new experiences together'), ('deep_connection', 'Deep conversations and emotional connection'), ('humour', 'Sharing humour and lighthearted fun'), ('stability', 'Building a comfortable and stable life together')], max_length=50)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
